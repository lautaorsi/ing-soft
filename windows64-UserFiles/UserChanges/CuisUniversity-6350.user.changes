

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'x 4/20/2025 16:48:01'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'x 4/20/2025 16:48:04'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'x 4/20/2025 16:48:04'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'x 4/20/2025 16:48:04'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'x 4/20/2025 16:48:04'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'x 4/20/2025 16:48:04'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'x 4/20/2025 16:48:04'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'x 4/20/2025 16:48:04'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'x 4/20/2025 16:48:04'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'x 4/20/2025 16:48:04'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'x 4/20/2025 16:48:04'!
PASSED!

----STARTUP---- (20 April 2025 16:42:03) as C:\Users\lauta\OneDrive\Desktop\UBA\Ing-Soft\windows64\CuisUniversity-6350.image!

!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'x 4/20/2025 16:50:01'!
findAllWordsWithPrefix: aPrefix AddingThemHere: aCollection
	
	
	
	^aCollection.! !

!methodRemoval: SentenceFinderByPrefix #findAllWordsWithPrefix:AddingThemHere: stamp: 'x 4/20/2025 16:57:27'!
findAllWordsWithPrefix: aPrefix AddingThemHere: aCollection
	
	
	
	^aCollection.!

----STARTUP---- (22 April 2025 11:12:58) as C:\Users\lauta\OneDrive\Desktop\UBA\Ing-Soft\windows64\CuisUniversity-6350.image!

!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'a 4/22/2025 11:51:19' prior: 50545612!
findAllWordsWithPrefix: aPrefix
	|aCollectionOfWords|
	aCollectionOfWords := OrderedCollection new.
	
	[aStack isEmpty not] whileTrue: [self isPrefix: aPrefix ofWord: aStack pop]
	
	^aCollectionOfWords! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'a 4/22/2025 11:52:58' prior: 50545655!
findAllWordsWithPrefix: aPrefix
	|aCollectionOfWords|
	aCollectionOfWords := OrderedCollection new.
	[aStack isEmpty not] whileTrue: [self isPrefix: aPrefix ofWord: aStack pop]
	
	^aCollectionOfWords! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'a 4/22/2025 12:16:35'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'a 4/22/2025 12:16:35'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'a 4/22/2025 12:16:35'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'a 4/22/2025 12:16:35'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'a 4/22/2025 12:16:35'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'a 4/22/2025 12:16:35'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'a 4/22/2025 12:16:35'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'a 4/22/2025 12:16:35'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'a 4/22/2025 12:16:35'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'a 4/22/2025 12:16:35'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'a 4/22/2025 12:53:30' prior: 50545665!
findAllWordsWithPrefix: aPrefix
	|aCollectionOfWords|
	aCollectionOfWords := OrderedCollection new.
	[aStack isEmpty not] whileTrue: []
	
	^aCollectionOfWords! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'a 4/22/2025 12:54:23' prior: 50545675!
findAllWordsWithPrefix: aPrefix
	|aCollectionOfWords|
	aCollectionOfWords := OrderedCollection new.
	[aStack isEmpty not] whileTrue: [self isPrefix: aPrefix ofWord: aStack pop addTo: aCollectionOfWords]
	
	^aCollectionOfWords! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'a 4/22/2025 12:54:36'!
isPrefix: aPrefix ofWord: aWord addTo: aColleciton
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'a 4/22/2025 12:54:41' prior: 50545694!
isPrefix: aPrefix ofWord: aWord addTo: aCollection
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'a 4/22/2025 13:00:49' prior: 50545628!
isPrefix: aPrefix ofWord: aWord
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'a 4/22/2025 13:00:51' prior: 50545704!
isPrefix: aPrefix ofWord: aWord
! !

!methodRemoval: SentenceFinderByPrefix #isPrefix:ofWord: stamp: 'a 4/22/2025 13:00:58'!
isPrefix: aPrefix ofWord: aWord
!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'a 4/22/2025 13:04:33' prior: 50545699!
isPrefix: aPrefix ofWord: aWord addTo: aCollection

	aWord matchesRegex: aPrefix + '*'.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'a 4/22/2025 13:04:35' prior: 50545718!
isPrefix: aPrefix ofWord: aWord addTo: aCollection

	aWord matchesRegex: aPrefix + '*'.
	! !

'hola' matchesRegex: 'hola' !

'hola' matchesRegex: 'hol' !

'hola' matchesRegex: 'hol*'  !

----SNAPSHOT----(22 April 2025 13:07:27) CuisUniversity-6350.image priorSource: 6847394!

----STARTUP---- (25 April 2025 09:32:31) as C:\Users\lauta\OneDrive\Desktop\UBA\Ing-Soft\windows64\CuisUniversity-6350.image!


----End fileIn of C:\Users\lauta\OneDrive\Desktop\UBA\Ing-Soft\Parte 2\07-Penales\Penales.st----!

Object subclass: #Pelota
	instanceVariableNames: 'tipo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Pelota category: #Penales stamp: 'a 4/25/2025 09:36:56'!
Object subclass: #Pelota
	instanceVariableNames: 'tipo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Object subclass: #Pelota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Pelota category: #Penales stamp: 'a 4/25/2025 09:37:10'!
Object subclass: #Pelota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Pelota subclass: #Playera
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Playera category: #Penales stamp: 'a 4/25/2025 09:37:20'!
Pelota subclass: #Playera
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Pelota subclass: #Jabulani
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Jabulani category: #Penales stamp: 'a 4/25/2025 09:37:24'!
Pelota subclass: #Jabulani
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Jabulani methodsFor: 'nil' stamp: 'a 4/25/2025 09:38:00'!
patear! !
!Playera methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:38:09'!
patear! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:38:36'!
saltar: posicion 
	! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:41:19'!
decideTirarAColocarSuFuerzaBaseEs: unaFuerza
	^self new inicializarConFuerza: unaFuerza yTiro: #aColocar! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:45:00' prior: 50546923!
decideTirarAColocarSuFuerzaBaseEs: unaFuerza
	^self new inicializarConFuerza: unaFuerza yTiroAColocar! !
!Pelota class methodsFor: 'nil' stamp: 'a 4/25/2025 09:45:47'!
jabulaniSudafricanaRapida
	^Jabulani new.! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:46:43'!
esperaPorTiroYSeAdelantaSuFuerzaBaseEs: unaFuerza
	^self new conFuerza: unaFuerza EsperaYSeAdelanta! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:46:53' prior: 50546940!
esperaPorTiroYSeAdelantaSuFuerzaBaseEs: unaFuerza
	^(self new conFuerza: unaFuerza) EsperaYSeAdelanta! !
!Penales class methodsFor: 'nil' stamp: 'a 4/25/2025 09:48:07'!
conDelantero: unDelantero yArquero: unArquero
	^self new initializeWith: unDelantero and: unArquero! !
!Penales class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:48:28' prior: 50546953!
conDelantero: unDelantero yArquero: unArquero
	^self new patea: unDelantero yAtaja: unArquero! !
!Penales methodsFor: 'nil' stamp: 'a 4/25/2025 09:49:54'!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:50:07' prior: 50546965!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	! !

Object subclass: #Penales
	instanceVariableNames: 'arquero delantero pelota'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Penales category: #Penales stamp: 'a 4/25/2025 09:52:23'!
Object subclass: #Penales
	instanceVariableNames: 'arquero delantero pelota'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Object subclass: #Penales
	instanceVariableNames: 'arquero delantero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Penales category: #Penales stamp: 'a 4/25/2025 09:52:26'!
Object subclass: #Penales
	instanceVariableNames: 'arquero delantero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!methodRemoval: Arquero #saltar: stamp: 'a 4/25/2025 09:52:46'!
saltar: posicion 
	!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:55:10' prior: 50546973!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: []! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:56:20' prior: 50547006!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class ]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:56:45' prior: 50547015!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class direccionArqueroFueraDeRango]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:57:09' prior: 50547025!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionArqueroFueraDeRango]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:58:10' prior: 50547036!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionArqueroFueraDeRango].
	
		 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionArqueroFueraDeRango]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:58:30' prior: 50547047!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionTiroFueraDeRango].
	
		 (direccionDeArquero between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionArqueroFueraDeRango]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:58:40' prior: 50547062!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionArqueroFueraDeRango].
		
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:59:51' prior: 50547077!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [].
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:59:52' prior: 50547092!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [].
	
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 09:59:56' prior: 50547109!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [].
	
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:00:00' prior: 50547126!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [].
	
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:09:25' prior: 50547143!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [].
	
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:11:16' prior: 50547160!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [self pateanAlMismoLugar].
	
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:11:35' prior: 50547177!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 3@3) not ifTrue: [self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	
	
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:11:48' prior: 50547195!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 3@3) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	
	
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:11:55' prior: 50547213!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 3@3) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 3@3) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	
	
		! !

Object subclass: #Delantero
	instanceVariableNames: 'puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Delantero category: #Penales stamp: 'a 4/25/2025 10:12:15'!
Object subclass: #Delantero
	instanceVariableNames: 'puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Object subclass: #Arquero
	instanceVariableNames: 'puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Arquero category: #Penales stamp: 'a 4/25/2025 10:12:22'!
Object subclass: #Arquero
	instanceVariableNames: 'puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Arquero methodsFor: 'nil' stamp: 'a 4/25/2025 10:12:29'!
puntaje
	^puntaje! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:12:37'!
puntaje
	^puntaje! !
!Arquero methodsFor: 'nil' stamp: 'a 4/25/2025 10:13:31'!
conFuerza: unaFuerza
	| fuera |
	fuera := unaFuerza! !

Object subclass: #Delantero
	instanceVariableNames: 'puntaje fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Delantero category: #Penales stamp: 'a 4/25/2025 10:13:44'!
Object subclass: #Delantero
	instanceVariableNames: 'puntaje fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Object subclass: #Arquero
	instanceVariableNames: 'puntaje fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Arquero category: #Penales stamp: 'a 4/25/2025 10:13:49'!
Object subclass: #Arquero
	instanceVariableNames: 'puntaje fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:13:58' prior: 50547276!
conFuerza: unaFuerza

	fuerza := unaFuerza! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:16:51'!
conFuerza: unaFuerza
	fuerza := unaFuerza! !
!Delantero methodsFor: 'nil' stamp: 'a 4/25/2025 10:17:11'!
fuerza
	^fuerza! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:17:14'!
fuerza
	^fuerza! !
!Penales methodsFor: 'nil' stamp: 'a 4/25/2025 10:17:30'!
pateanAlMismoLugar
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:34:25' prior: 50547317!
pateanAlMismoLugar
	! !
!Penales methodsFor: 'nil' stamp: 'a 4/25/2025 10:36:44'!
puntajeDeDelantero
	^delantero puntaje
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:36:53'!
puntajeDeArquero
	^arquero puntaje
	! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:37:44' prior: 50546947!
esperaPorTiroYSeAdelantaSuFuerzaBaseEs: unaFuerza
	^(self new inicializarconFuerza: unaFuerza) EsperaYSeAdelanta! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:37:56'!
inicializarconFuerza: unaFuerza

	fuerza := unaFuerza! !

!methodRemoval: Arquero #conFuerza: stamp: 'a 4/25/2025 10:37:58'!
conFuerza: unaFuerza

	fuerza := unaFuerza!
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:38:03'!
inicializarconFuerza: unaFuerza

	fuerza := unaFuerza! !

!methodRemoval: Delantero #conFuerza: stamp: 'a 4/25/2025 10:38:07'!
conFuerza: unaFuerza
	fuerza := unaFuerza!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:38:24'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:38:24'!
ERROR!
!Delantero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:39:02' prior: 50546930!
decideTirarAColocarSuFuerzaBaseEs: unaFuerza
	^(self new inicializarConFuerza: unaFuerza) yTiroAColocar! !
!Delantero methodsFor: 'nil' stamp: 'a 4/25/2025 10:40:04'!
yTiroAColocar
	! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:40:57'!
EsperaYSeAdelanta! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:41:04'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:41:04'!
ERROR!
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:41:26'!
inicializarConFuerza: unaFuerza

	fuerza := unaFuerza! !

!methodRemoval: Delantero #inicializarconFuerza: stamp: 'a 4/25/2025 10:41:28'!
inicializarconFuerza: unaFuerza

	fuerza := unaFuerza!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:41:34'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:41:34'!
ERROR!
!Penales class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:42:42' prior: 50546960!
conDelantero: unDelantero yArquero: unArquero
	^(self new) patea: unDelantero yAtaja: unArquero! !
!Penales methodsFor: 'nil' stamp: 'a 4/25/2025 10:43:07'!
patea: unDelantero yAtaja: unArquero
	delantero := unDelantero.
	arquero := unArquero.! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:43:13'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:43:13'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:43:21'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:43:21'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:43:44'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:45:24'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:45:24'!
FAILURE!
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:46:22' overrides: 16932297!
initialize
	puntaje := 0! !
!Delantero methodsFor: 'nil' stamp: 'a 4/25/2025 10:46:26' overrides: 16932297!
initialize
	puntaje := 0! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 10:46:31'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'a 4/25/2025 10:46:35'!
FAILURE!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'a 4/25/2025 10:46:35'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:47:29' prior: 50547231!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	
	
		! !

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'a 4/25/2025 10:47:35'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'a 4/25/2025 10:47:36'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'a 4/25/2025 10:47:37'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'a 4/25/2025 10:47:39'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'a 4/25/2025 10:47:40'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'a 4/25/2025 10:47:41'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'a 4/25/2025 10:47:42'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 10:47:43'!
FAILURE!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 10:47:43'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:54:18'!
varDireccionRemateResultante! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:54:46' prior: 50547415!
varDireccionRemateResultante
! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:54:59' prior: 50547398!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	
	
		! !

Object subclass: #Penales
	instanceVariableNames: 'arquero delantero direccionRemate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Penales category: #Penales stamp: 'a 4/25/2025 10:55:10'!
Object subclass: #Penales
	instanceVariableNames: 'arquero delantero direccionRemate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:55:36' prior: 50547419!
varDireccionRemateResultante
	^direccionRemate! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:55:52' prior: 50547423!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	
	
		! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 10:56:03'!
FAILURE!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 10:56:03'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:56:34' prior: 50547458!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	Delantero gol
	
	
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:56:36' prior: 50547477!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	Delantero gol.
	
	
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:56:40' prior: 50547496!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	delantero gol.
	
	
		! !
!Delantero methodsFor: 'nil' stamp: 'a 4/25/2025 10:56:54'!
gol
	puntaje := puntaje + 1.! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 10:57:10'!
PASSED!
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:57:28'!
ataja
	puntaje := puntaje + 1.! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:58:51' prior: 50547321!
pateanAlMismoLugar
	delantero fuerza < arquero fuerza ifTrue: [arquero ataja]
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:59:00' prior: 50547543!
pateanAlMismoLugar
	delantero fuerza < arquero fuerza ifTrue: [arquero ataja. ^self]
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:59:01' prior: 50547549!
pateanAlMismoLugar
	delantero fuerza < arquero fuerza ifTrue: [arquero ataja. ^self]
	
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:59:10' prior: 50547555!
pateanAlMismoLugar
	delantero fuerza < arquero fuerza ifTrue: [arquero ataja].
	
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:59:26' prior: 50547561!
pateanAlMismoLugar
	delantero fuerza < arquero fuerza ifTrue: [arquero ataja].
	delantero fuerza > arquero fuerza ifTrue: [delantero gol ]
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:59:36' prior: 50547567!
pateanAlMismoLugar
	delantero fuerza < arquero fuerza ifTrue: [arquero ataja].
	delantero fuerza > arquero fuerza ifTrue: [delantero gol ]
	
	! !

Object subclass: #Penales
	instanceVariableNames: 'arquero delantero pelota direccionRemate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Penales category: #Penales stamp: 'a 4/25/2025 10:59:43'!
Object subclass: #Penales
	instanceVariableNames: 'arquero delantero pelota direccionRemate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 10:59:59' prior: 50547516!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	pelota := unaPelota.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero == direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	delantero gol.
	
	
		! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:00:21'!
bonus! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:00:22' prior: 50547615!
bonus
	! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:02:01'!
bonus: unArqueroOJugador
	! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:02:02' prior: 50547622!
bonus: unArqueroOJugador
	
	! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:02:32' prior: 50547626!
bonus: unArqueroOJugador
	unArqueroOJugador usanPelotaJabulani 
	! !
!Delantero methodsFor: 'nil' stamp: 'a 4/25/2025 11:02:56'!
usanPelotaJabulani 
	fuerza := fuerza * 1/2! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 11:18:02'!
PASSED!
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:18:24'!
TiroAColocar
	! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:18:34' prior: 50547639!
TiroAColocar
	fuerza := fuerza / 2	! !

!methodRemoval: Delantero #yTiroAColocar stamp: 'a 4/25/2025 11:18:37'!
yTiroAColocar
	!
!Delantero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:18:44' prior: 50547356!
decideTirarAColocarSuFuerzaBaseEs: unaFuerza
	^(self new inicializarConFuerza: unaFuerza) TiroAColocar! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:19:02' prior: 50547575!
pateanAlMismoLugar
	delantero fuerza < arquero fuerza ifTrue: [arquero ataja].
	delantero fuerza > arquero fuerza ifTrue: [delantero gol ].
	
	! !

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 11:19:08'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 11:19:13'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 11:19:13'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 11:25:47'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 11:25:47'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:26:48' prior: 50547658!
pateanAlMismoLugar
	delantero fuerza < arquero fuerza ifTrue: [arquero ataja].
	delantero fuerza > arquero fuerza ifTrue: [delantero gol ].
	delantero fuerza == arquero fuerza ifTrue: [arquero ataja]
	! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 11:26:54'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 11:26:55'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 11:26:56'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 11:26:56'!
FAILURE!

2@2 == 2@2 !

2@2 = 2@2  !

(2@2 == 2@2)  !

(2@2) == (2@2)  !

(2@2) == (2@2)  !

(2@2) = (2@2)  !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:35:05' prior: 50547595!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	pelota := unaPelota.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(direccionDeArquero) = (direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	delantero gol.
	
	
		! !

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 11:35:22'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 11:35:24'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 11:35:24'!
ERROR!
!Penales methodsFor: 'nil' stamp: 'a 4/25/2025 11:35:48'!
varFuerzaResultanteDeTiro
	delantero fuerza! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:35:49' prior: 50547698!
varFuerzaResultanteDeTiro
	^delantero fuerza! !

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 11:35:55'!
PASSED!
!Arquero class methodsFor: 'nil' stamp: 'a 4/25/2025 11:36:28'!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerza
	! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:36:35' prior: 50547707!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerza
	
	! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:36:53' prior: 50547712!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerza
	^(self new inicializarconFuerza: unaFuerza) EligeAntes
	! !
!Arquero methodsFor: 'nil' stamp: 'a 4/25/2025 11:37:15'!
eligeAntes
	fuerza := fuerza + (fuerza / 2)! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:37:37'!
varFuerzaResultanteDeAtajada
	^arquero fuerza! !

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 11:37:47'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:37:49'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:37:49'!
ERROR!
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:38:19' prior: 50547717!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerza
	^(self new inicializarconFuerza: unaFuerza) eligeAntes
	! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:38:22' prior: 50547333!
esperaPorTiroYSeAdelantaSuFuerzaBaseEs: unaFuerza
	^(self new inicializarconFuerza: unaFuerza) esperaYSeAdelanta! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:38:35'!
esperaYSeAdelanta! !

!methodRemoval: Arquero #EsperaYSeAdelanta stamp: 'a 4/25/2025 11:38:35'!
EsperaYSeAdelanta!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 11:38:45'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:38:48'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'a 4/25/2025 11:45:07'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 11:45:24'!
FAILURE!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 11:45:25'!
FAILURE!

Object subclass: #Arquero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Arquero category: #Penales stamp: 'a 4/25/2025 11:47:27'!
Object subclass: #Arquero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Arquero subclass: #ArqueroAdelantado
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #ArqueroAdelantado category: #Penales stamp: 'a 4/25/2025 11:47:32'!
Arquero subclass: #ArqueroAdelantado
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Arquero subclass: #ArqueroEsperando
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #ArqueroEsperando category: #Penales stamp: 'a 4/25/2025 11:47:37'!
Arquero subclass: #ArqueroEsperando
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Arquero subclass: #ArqueroEsperando
	instanceVariableNames: 'fuerza puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #ArqueroEsperando category: #Penales stamp: 'a 4/25/2025 11:47:47'!
Arquero subclass: #ArqueroEsperando
	instanceVariableNames: 'fuerza puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Arquero subclass: #ArqueroEsperando
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #ArqueroEsperando category: #Penales stamp: 'a 4/25/2025 11:47:51'!
Arquero subclass: #ArqueroEsperando
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Arquero subclass: #ArqueroAdelantado
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #ArqueroAdelantado category: #Penales stamp: 'a 4/25/2025 11:48:08'!
Arquero subclass: #ArqueroAdelantado
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Object subclass: #Arquero
	instanceVariableNames: 'puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Arquero category: #Penales stamp: 'a 4/25/2025 11:48:14'!
Object subclass: #Arquero
	instanceVariableNames: 'puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!methodRemoval: Arquero #eligeAntes stamp: 'a 4/25/2025 11:49:14'!
eligeAntes
	fuerza := fuerza + (fuerza / 2)!
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:49:42' prior: 50547732!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerza
	^(ArqueroEsperando inicializarconFuerza: unaFuerza) 
	! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:49:53' prior: 50547833!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerza
	^(ArqueroEsperando new inicializarconFuerza: unaFuerza) 
	! !
!ArqueroEsperando methodsFor: 'nil' stamp: 'a 4/25/2025 11:50:14'!
inicializarConFuerza: unaFuerza
		fuerza := unaFuerza + (unaFuerza / 2)! !

!methodRemoval: Arquero #esperaYSeAdelanta stamp: 'a 4/25/2025 11:50:20'!
esperaYSeAdelanta!
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:50:52' prior: 50547739!
esperaPorTiroYSeAdelantaSuFuerzaBaseEs: unaFuerza
	^(ArqueroAdelantado new inicializarconFuerza: unaFuerza) ! !

!methodRemoval: Arquero #fuerza stamp: 'a 4/25/2025 11:51:14'!
fuerza
	^fuerza!

!methodRemoval: Arquero #ataja stamp: 'a 4/25/2025 11:51:25'!
ataja
	puntaje := puntaje + 1.!                                                                               
inicializarconFuerza: unaFuerza

	fuerza := unaFuerza!
!ArqueroAdelantado methodsFor: 'nil' stamp: 'a 4/25/2025 11:51:37'!
inicializarconFuerza: unaFuerza

	fuerza := unaFuerza! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:52:52'!
inicializarConFuerza: unaFuerza
	^self subclassResponsibility! !

!methodRemoval: Arquero #initialize stamp: 'a 4/25/2025 11:53:14'!
initialize
	puntaje := 0!
!ArqueroAdelantado methodsFor: 'nil' stamp: 'a 4/25/2025 11:53:19' overrides: 16932297!
initialize
	puntaje := 0! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:53:23' overrides: 16932297!
initialize
	puntaje := 0! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:53:45' prior: 50547269!
puntaje
	^self subclassResponsibility! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:53:50'!
fuerza
	^self subclassResponsibility! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:53:57' overrides: 50547893!
puntaje
	^puntaje! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:54:03' overrides: 50547897!
fuerza
	^fuerza! !
!ArqueroEsperando methodsFor: 'nil' stamp: 'a 4/25/2025 11:54:09' overrides: 50547893!
puntaje
	^puntaje! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:54:14' overrides: 50547897!
fuerza
	^fuerza! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:54:22'!
ataja
	puntaje := puntaje + 1! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:54:29'!
ataja
	puntaje := puntaje + 1! !
!Arquero methodsFor: 'nil' stamp: 'a 4/25/2025 11:54:51'!
ataja
	^self subclassResponsibility! !

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 11:55:22'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 11:55:23'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 11:55:25'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:55:28'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:55:28'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:55:32'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 11:55:35'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 11:55:37'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'a 4/25/2025 11:55:38'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'a 4/25/2025 11:55:38'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'a 4/25/2025 11:55:39'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'a 4/25/2025 11:55:40'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'a 4/25/2025 11:55:40'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'a 4/25/2025 11:55:41'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'a 4/25/2025 11:55:42'!
PASSED!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 11:55:42'!
PASSED!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:56:21' prior: 50547679!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	pelota := unaPelota.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(arquero conDireccion: direccionDeArquero ataja: direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	delantero gol.
	
	
		! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:56:33'!
conDireccion: direccionDeArquero ataja: direccionDeRemate
! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:56:35' prior: 50547951!
conDireccion: direccionDeArquero ataja: direccionDeRemate
	! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:56:55' prior: 50547957!
conDireccion: direccionDeArquero ataja: direccionDeRemate
	^ direccionDeArquero x = direccionDeRemate x! !
!ArqueroEsperando methodsFor: 'nil' stamp: 'a 4/25/2025 11:57:12'!
conDireccion: direccionDeArquero ataja: direccionDeRemate
	! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:57:53'!
conDireccion: direccionDeArquero ataja: direccionDeRemate
	^self subclassResponsibility! !

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:57:59'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:57:59'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:58:07'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:58:07'!
ERROR!
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:58:31' overrides: 50547876!
inicializarConFuerza: unaFuerza

	fuerza := unaFuerza! !

!methodRemoval: ArqueroAdelantado #inicializarconFuerza: stamp: 'a 4/25/2025 11:58:34'!
inicializarconFuerza: unaFuerza

	fuerza := unaFuerza!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:58:40'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:58:40'!
ERROR!
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:58:52' prior: 50547855!
esperaPorTiroYSeAdelantaSuFuerzaBaseEs: unaFuerza
	^(ArqueroAdelantado new inicializarConFuerza: unaFuerza) ! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 11:58:57' prior: 50547840!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerza
	^(ArqueroEsperando new inicializarConFuerza: unaFuerza) 
	! !

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:59:04'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 11:59:04'!
ERROR!
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:00:09'!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	^self subclassResponsibility! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:00:20' overrides: 50548004!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	^ direccionDeArquero x = direccionDeRemate x! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:00:38' prior: 50548011 overrides: 50548004!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	^ direccionDeArquero x = direccionDeRemate x & fuerza > unaFuerza! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:00:53' overrides: 50548004!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	! !

!methodRemoval: ArqueroEsperando #conDireccion:ataja: stamp: 'a 4/25/2025 12:00:56'!
conDireccion: direccionDeArquero ataja: direccionDeRemate
	!
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:01:08' prior: 50548027 overrides: 50548004!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	
	^ fuerza > unaFuerza! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:01:35' prior: 50548038 overrides: 50548004!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	
	^ direccionDeArquero = direccionDeRemate & fuerza > unaFuerza! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:01:42' prior: 50548045 overrides: 50548004!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	
	^ (direccionDeArquero) = (direccionDeRemate) & fuerza > unaFuerza! !

!methodRemoval: Arquero #conDireccion:ataja: stamp: 'a 4/25/2025 12:01:47'!
conDireccion: direccionDeArquero ataja: direccionDeRemate
	^self subclassResponsibility!

!methodRemoval: ArqueroAdelantado #conDireccion:ataja: stamp: 'a 4/25/2025 12:01:50'!
conDireccion: direccionDeArquero ataja: direccionDeRemate
	^ direccionDeArquero x = direccionDeRemate x!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:02:22' prior: 50547930!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	pelota := unaPelota.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(arquero conDireccion: direccionDeArquero yFuerza: delantero fuerza ataja: direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	delantero gol.
	
	
		! !

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 12:02:36'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 12:02:37'!
FAILURE!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 12:02:37'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 12:02:47'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 12:02:48'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 12:02:50'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 12:02:50'!
ERROR!
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:04:32' prior: 50548019 overrides: 50548004!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	^ direccionDeArquero x = direccionDeRemate x & (fuerza > unaFuerza)! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:04:40' prior: 50548054 overrides: 50548004!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	
	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza > unaFuerza)! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 12:04:44'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 12:04:44'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 12:04:46'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 12:04:47'!
FAILURE!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 12:04:47'!
FAILURE!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 12:04:51'!
FAILURE!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 12:04:51'!
FAILURE!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 12:04:56'!
FAILURE!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 12:04:56'!
FAILURE!
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:07:06' prior: 50547846 overrides: 50547876!
inicializarConFuerza: unaFuerza
		fuerza := unaFuerza ! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:07:25' prior: 50547981 overrides: 50547876!
inicializarConFuerza: unaFuerza

	fuerza := unaFuerza + (unaFuerza/2)! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:07:33' prior: 50548105 overrides: 50548004!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	
	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= unaFuerza)! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:07:39' prior: 50548096 overrides: 50548004!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	^ direccionDeArquero x = direccionDeRemate x & (fuerza >= unaFuerza)! !

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 12:07:44'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 12:07:45'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 12:07:46'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 12:07:47'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 12:07:48'!
FAILURE!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 12:07:48'!
FAILURE!
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:10:27' prior: 50548114 overrides: 50547876!
inicializarConFuerza: unaFuerza
		fuerza := unaFuerza + (unaFuerza / 2)! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:10:38' prior: 50548120 overrides: 50547876!
inicializarConFuerza: unaFuerza

	fuerza := unaFuerza ! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 12:10:46'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 12:10:48'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 12:10:49'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 12:10:50'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 12:10:51'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'a 4/25/2025 12:10:53'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 12:10:54'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 12:10:55'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 12:10:55'!
ERROR!
!Pelota class methodsFor: 'nil' stamp: 'a 4/25/2025 12:11:12'!
playeraLentaCostaAzul! !
!Pelota class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:11:22' prior: 50548155!
playeraLentaCostaAzul
	^Playera new! !

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'a 4/25/2025 12:11:34'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 12:11:53'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 12:11:54'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 12:11:54'!
FAILURE!
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:14:11'!
conDireccion: direccionDeArquero yFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	^ direccionDeArquero x = direccionDeRemate x & (fuerza >= unaFuerza)! !

!methodRemoval: ArqueroAdelantado #conDireccion:yFuerza:ataja: stamp: 'a 4/25/2025 12:14:11'!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	^ direccionDeArquero x = direccionDeRemate x & (fuerza >= unaFuerza)!
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:14:43'!
conDireccion: direccionDeArquero yFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	
	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= unaFuerza)! !

!methodRemoval: ArqueroEsperando #conDireccion:yFuerza:conPelota:ataja: stamp: 'a 4/25/2025 12:14:44'!
conDireccion: direccionDeArquero yFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	
	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= unaFuerza)!
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:15:01'!
conDireccion: direccionDeArquero yFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	
	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= unaFuerza)! !

!methodRemoval: ArqueroEsperando #conDireccion:yFuerza:ataja: stamp: 'a 4/25/2025 12:15:03'!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	
	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= unaFuerza)!
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:15:09'!
conDireccion: direccionDeArquero yFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	^self subclassResponsibility! !

!methodRemoval: Arquero #conDireccion:yFuerza:ataja: stamp: 'a 4/25/2025 12:15:14'!
conDireccion: direccionDeArquero yFuerza: unaFuerza ataja: direccionDeRemate
	^self subclassResponsibility!
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:15:18'!
conDireccion: direccionDeArquero conFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	^self subclassResponsibility! !

!methodRemoval: Arquero #conDireccion:yFuerza:conPelota:ataja: stamp: 'a 4/25/2025 12:15:20'!
conDireccion: direccionDeArquero yFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	^self subclassResponsibility!
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:15:33' overrides: 50548225!
conDireccion: direccionDeArquero conFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	^ direccionDeArquero x = direccionDeRemate x & (fuerza >= unaFuerza)! !

!methodRemoval: ArqueroAdelantado #conDireccion:yFuerza:conPelota:ataja: stamp: 'a 4/25/2025 12:15:35'!
conDireccion: direccionDeArquero yFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	^ direccionDeArquero x = direccionDeRemate x & (fuerza >= unaFuerza)!
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:15:53' overrides: 50548225!
conDireccion: direccionDeArquero conFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate	
	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= unaFuerza)! !

!methodRemoval: ArqueroEsperando #conDireccion:yFuerza:conPelota:ataja: stamp: 'a 4/25/2025 12:15:56'!
conDireccion: direccionDeArquero yFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	
	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= unaFuerza)!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 12:16:19' prior: 50548073!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	pelota := unaPelota.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(arquero conDireccion: direccionDeArquero conFuerza: delantero fuerza conPelota: pelota ataja: direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	delantero gol.
	
	
		! !

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 12:59:12'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 12:59:14'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 12:59:15'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 12:59:15'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 12:59:16'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'a 4/25/2025 12:59:18'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 12:59:19'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 12:59:20'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 12:59:20'!
FAILURE!
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 13:01:09' prior: 50548240 overrides: 50548225!
conDireccion: direccionDeArquero conFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	^ direccionDeArquero x = direccionDeRemate x & (fuerza >= unaFuerza * unaPelota efecto)! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 13:01:15' prior: 50548298 overrides: 50548225!
conDireccion: direccionDeArquero conFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	^ direccionDeArquero x = direccionDeRemate x & (fuerza >= (unaFuerza * unaPelota efecto))! !
!Pelota methodsFor: 'nil' stamp: 'a 4/25/2025 13:01:28'!
efecto
	self subclassResponsibility! !

!methodRemoval: Jabulani #bonus: stamp: 'a 4/25/2025 13:01:32'!
bonus: unArqueroOJugador
	unArqueroOJugador usanPelotaJabulani 
	!

!methodRemoval: Jabulani #bonus stamp: 'a 4/25/2025 13:01:34'!
bonus
	!

!methodRemoval: Jabulani #patear stamp: 'a 4/25/2025 13:01:36'!
patear!
!Jabulani methodsFor: 'nil' stamp: 'a 4/25/2025 13:01:47' overrides: 50548316!
efecto
	! !

!methodRemoval: Playera #patear stamp: 'a 4/25/2025 13:01:54'!
patear!
!Playera methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 13:01:57' overrides: 50548316!
efecto! !
!Playera methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 13:02:17' prior: 50548335 overrides: 50548316!
efecto
	^ 4/5! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 13:02:29' prior: 50548329 overrides: 50548316!
efecto
	^3/2 ! !

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 13:02:59'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 13:03:00'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 13:03:12'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 13:03:12'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 13:03:21'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 13:03:21'!
FAILURE!
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 13:06:16' prior: 50548258 overrides: 50548225!
conDireccion: direccionDeArquero conFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate	
	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= (unaFuerza * unaPelota efecto))! !

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 13:06:22'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 13:06:22'!
FAILURE!

50 * 4/5 !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 13:08:32' prior: 50547703!
varFuerzaResultanteDeTiro
	^delantero fuerza! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 13:09:10' prior: 50548358!
varFuerzaResultanteDeTiro
	^delantero fuerza * pelota efecto! !

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 13:09:16'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 13:09:17'!
FAILURE!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 13:09:17'!
FAILURE!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 13:09:28'!
FAILURE!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 13:09:28'!
FAILURE!
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 13:10:39' prior: 50548348 overrides: 50548225!
conDireccion: direccionDeArquero conFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate	
	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= (unaFuerza * unaPelota efecto)) ! !

----SNAPSHOT----(25 April 2025 13:11:35) CuisUniversity-6350.image priorSource: 6850649!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 14:06:29'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 14:06:31'!
FAILURE!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 14:06:31'!
FAILURE!

----STARTUP---- (25 April 2025 14:06:12) as C:\Users\lauta\OneDrive\Desktop\UBA\Ing-Soft\windows64\CuisUniversity-6350.image!

!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:07:39' prior: 50547635!
usanPelotaJabulani 
	fuerza := fuerza + fuerza * 1/2! !

Object subclass: #Delantero
	instanceVariableNames: 'puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Delantero category: #Penales stamp: 'a 4/25/2025 14:08:25'!
Object subclass: #Delantero
	instanceVariableNames: 'puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Delantero subclass: #DelanteroColocando
	instanceVariableNames: 'puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Delantero subclass: #DelanteroColocando
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #DelanteroColocando category: #Penales stamp: 'a 4/25/2025 14:08:36'!
Delantero subclass: #DelanteroColocando
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

Delantero subclass: #DelanteroMatando
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #DelanteroMatando category: #Penales stamp: 'a 4/25/2025 14:08:40'!
Delantero subclass: #DelanteroMatando
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!methodRemoval: Delantero #TiroAColocar stamp: 'a 4/25/2025 14:08:51'!
TiroAColocar
	fuerza := fuerza / 2	!
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:09:04' prior: 50547311!
fuerza
	^self subclassResponsibility! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:09:30' prior: 50547369!
inicializarConFuerza: unaFuerza

	^self subclassResponsibility! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:09:45' prior: 50547651!
decideTirarAColocarSuFuerzaBaseEs: unaFuerza
	^(DelanteroColocando new inicializarConFuerza: unaFuerza)! !
!DelanteroColocando methodsFor: 'nil' stamp: 'a 4/25/2025 14:10:10' overrides: 50548437!
inicializarConFuerza: unaFuerza
	fuerza := unaFuerza! !
!DelanteroMatando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:10:21' overrides: 50548437!
inicializarConFuerza: unaFuerza
	fuerza := unaFuerza! !

!methodRemoval: Delantero #usanPelotaJabulani stamp: 'a 4/25/2025 14:10:42'!
usanPelotaJabulani 
	fuerza := fuerza + fuerza * 1/2!
!DelanteroColocando methodsFor: 'nil' stamp: 'a 4/25/2025 14:10:59' overrides: 50547394!
initialize
	puntaje := 0! !
!DelanteroMatando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:11:05' overrides: 50547394!
initialize
	puntaje := 0! !

!methodRemoval: Delantero #initialize stamp: 'a 4/25/2025 14:11:09'!
initialize
	puntaje := 0!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 14:11:46'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'a 4/25/2025 14:11:48'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'a 4/25/2025 14:11:49'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'a 4/25/2025 14:11:50'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'a 4/25/2025 14:11:51'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'a 4/25/2025 14:11:51'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'a 4/25/2025 14:11:52'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'a 4/25/2025 14:11:53'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 14:11:53'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 14:11:53'!
ERROR!
!DelanteroColocando methodsFor: 'nil' stamp: 'a 4/25/2025 14:12:15' overrides: 50548432!
fuerza
	fuerza! !
!DelanteroMatando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:12:21' overrides: 50548432!
fuerza
	fuerza! !

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'a 4/25/2025 14:12:31'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 14:12:32'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 14:12:32'!
ERROR!
!DelanteroColocando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:12:50' prior: 50548476 overrides: 50548432!
fuerza
	^fuerza! !
!DelanteroMatando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:12:55' prior: 50548480 overrides: 50548432!
fuerza
	^fuerza! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 14:12:59'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 14:13:00'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 14:13:00'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 14:13:00'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 14:13:06'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 14:13:06'!
FAILURE!

unaFuerza * unaPelota efecto !
!DelanteroColocando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:16:16' prior: 50548450 overrides: 50548437!
inicializarConFuerza: unaFuerza
	fuerza := unaFuerza / 2! !
!DelanteroColocando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:16:20' prior: 50548496 overrides: 50548437!
inicializarConFuerza: unaFuerza
	fuerza := (unaFuerza / 2)! !

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'a 4/25/2025 14:16:26'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 14:16:28'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 14:16:28'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 14:16:29'!
FAILURE!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 14:16:29'!
FAILURE!

juegoPenales puntajeDeDelantero !

unaFuerza * unaPelota efecto !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:19:09' prior: 50548343 overrides: 50548316!
efecto! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:19:15' prior: 50548510 overrides: 50548316!
efecto
	^1! !

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 14:19:20'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 14:19:21'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 14:19:22'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 14:19:23'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'a 4/25/2025 14:19:24'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 14:19:25'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 14:19:26'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 14:19:27'!
FAILURE!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 14:19:27'!
FAILURE!
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:25:40' prior: 50548308 overrides: 50548225!
conDireccion: direccionDeArquero conFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	
	 direccionDeArquero x = direccionDeRemate x & (fuerza >= (unaFuerza * unaPelota efecto))! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:27:30'!
conDireccion: direccionDeArquero pateando: unaFuerza conPelota: unaPelota atajandoEnDireccion: direccionDeRemate
	^self subclassResponsibility! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:27:30' overrides: 50548528!
conDireccion: direccionDeArquero pateando: unaFuerza conPelota: unaPelota atajandoEnDireccion: direccionDeRemate
	
	 direccionDeArquero x = direccionDeRemate x & (fuerza >= (unaFuerza * unaPelota efecto))! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:27:30' overrides: 50548528!
conDireccion: direccionDeArquero pateando: unaFuerza conPelota: unaPelota atajandoEnDireccion: direccionDeRemate	
	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= (unaFuerza * unaPelota efecto)) ! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:27:30' prior: 50548275!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	pelota := unaPelota.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(arquero conDireccion: direccionDeArquero pateando: delantero fuerza conPelota: pelota atajandoEnDireccion: direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	delantero gol.
	
	
		! !

!methodRemoval: Arquero #conDireccion:conFuerza:conPelota:ataja: stamp: 'a 4/25/2025 14:27:30'!
conDireccion: direccionDeArquero conFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	^self subclassResponsibility!

!methodRemoval: ArqueroAdelantado #conDireccion:conFuerza:conPelota:ataja: stamp: 'a 4/25/2025 14:27:30'!
conDireccion: direccionDeArquero conFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate
	
	 direccionDeArquero x = direccionDeRemate x & (fuerza >= (unaFuerza * unaPelota efecto))!

!methodRemoval: ArqueroEsperando #conDireccion:conFuerza:conPelota:ataja: stamp: 'a 4/25/2025 14:27:30'!
conDireccion: direccionDeArquero conFuerza: unaFuerza conPelota: unaPelota ataja: direccionDeRemate	
	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= (unaFuerza * unaPelota efecto)) !
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:27:48' prior: 50548528!
conDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota atajandoEnDireccion: direccionDeRemate
	^self subclassResponsibility! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:28:01' prior: 50548536 overrides: 50548605!
conDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota atajandoEnDireccion: direccionDeRemate
	
	 direccionDeArquero x = direccionDeRemate x & (fuerza >= (unDelantero fuerza * unaPelota efecto))! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:28:21' prior: 50548546 overrides: 50548605!
conDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota atajandoEnDireccion: direccionDeRemate	
	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= ( unDelantero fuerza * unaPelota efecto)) ! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:29:00' prior: 50548625 overrides: 50548605!
conDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota atajandoEnDireccion: direccionDeRemate	
	|bonusTiro|

	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= ( unDelantero fuerza * unaPelota efecto)) ! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:30:21' prior: 50548636 overrides: 50548605!
conDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota atajandoEnDireccion: direccionDeRemate	
	|bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero tipoDeTiro.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza >= ( unDelantero fuerza * unaPelota efecto)) ! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:30:42' prior: 50548648 overrides: 50548605!
conDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota atajandoEnDireccion: direccionDeRemate	
	|bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero tipoDeTiro.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) ! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:32:05'!
conDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota EnDireccion: direccionDeRemate	
	|bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero tipoDeTiro.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) ! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:32:32'!
AtajaSaltandoEnDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota hacia: direccionDeRemate	
	|bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero tipoDeTiro.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) ! !

!methodRemoval: ArqueroEsperando #conDireccion:pateando:conPelota:EnDireccion: stamp: 'a 4/25/2025 14:32:35'!
conDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota EnDireccion: direccionDeRemate	
	|bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero tipoDeTiro.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) !

!methodRemoval: ArqueroEsperando #AtajaSaltandoEnDireccion:pateando:conPelota:hacia: stamp: 'a 4/25/2025 14:32:46'!
AtajaSaltandoEnDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota hacia: direccionDeRemate	
	|bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero tipoDeTiro.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) !
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:33:29'!
atajaEnDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota pateandoHacia: direccionDeRemate
	^self subclassResponsibility! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:33:29' overrides: 50548740!
atajaEnDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota pateandoHacia: direccionDeRemate
	
	 direccionDeArquero x = direccionDeRemate x & (fuerza >= (unDelantero fuerza * unaPelota efecto))! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:33:29' overrides: 50548740!
atajaEnDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota pateandoHacia: direccionDeRemate	
	|bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero tipoDeTiro.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) ! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:33:29' prior: 50548556!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	pelota := unaPelota.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(arquero atajaEnDireccion: direccionDeArquero pateando: delantero fuerza conPelota: pelota pateandoHacia: direccionDeRemate) ifTrue: [^self pateanAlMismoLugar].
	
	delantero gol.
	
	
		! !

!methodRemoval: Arquero #conDireccion:pateando:conPelota:atajandoEnDireccion: stamp: 'a 4/25/2025 14:33:30'!
conDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota atajandoEnDireccion: direccionDeRemate
	^self subclassResponsibility!

!methodRemoval: ArqueroAdelantado #conDireccion:pateando:conPelota:atajandoEnDireccion: stamp: 'a 4/25/2025 14:33:30'!
conDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota atajandoEnDireccion: direccionDeRemate
	
	 direccionDeArquero x = direccionDeRemate x & (fuerza >= (unDelantero fuerza * unaPelota efecto))!

!methodRemoval: ArqueroEsperando #conDireccion:pateando:conPelota:atajandoEnDireccion: stamp: 'a 4/25/2025 14:33:30'!
conDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota atajandoEnDireccion: direccionDeRemate	
	|bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero tipoDeTiro.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:34:27' prior: 50548748 overrides: 50548740!
atajaEnDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota pateandoHacia: direccionDeRemate
	
	 |bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero tipoDeTiro.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) x  = (direccionDeRemate) x & (fuerza * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) ! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:41:05' prior: 50548831 overrides: 50548740!
atajaEnDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota pateandoHacia: direccionDeRemate
	
	 |bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero VentajaPorTipoDeTiro.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) x  = (direccionDeRemate) x & (fuerza * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) ! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:41:14' prior: 50548758 overrides: 50548740!
atajaEnDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota pateandoHacia: direccionDeRemate	
	|bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero VentajaPorTipoDeTiro.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) ! !
!DelanteroColocando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:41:24'!
VentajaPorTipoDeTiro
	! !
!DelanteroMatando methodsFor: 'nil' stamp: 'a 4/25/2025 14:41:29'!
VentajaPorTipoDeTiro! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:42:31' prior: 50548848 overrides: 50548740!
atajaEnDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota pateandoHacia: direccionDeRemate
	
	 |bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero VentajaPorTipoDeTiroCon: unaPelota.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) x  = (direccionDeRemate) x & (fuerza * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) ! !
!ArqueroEsperando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:42:42' prior: 50548865 overrides: 50548740!
atajaEnDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota pateandoHacia: direccionDeRemate	
	|bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero VentajaPorTipoDeTiroCon: unaPelota.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) = (direccionDeRemate) & (fuerza * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) ! !
!DelanteroColocando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:42:52'!
VentajaPorTipoDeTiroCon: unaPelota
! !

!methodRemoval: DelanteroColocando #VentajaPorTipoDeTiro stamp: 'a 4/25/2025 14:42:54'!
VentajaPorTipoDeTiro
	!
!DelanteroMatando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:42:59'!
VentajaPorTipoDeTiroCon! !

!methodRemoval: DelanteroMatando #VentajaPorTipoDeTiroCon stamp: 'a 4/25/2025 14:43:01'!
VentajaPorTipoDeTiroCon!
!DelanteroMatando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:43:04'!
VentajaPorTipoDeTiroCon! !

!methodRemoval: DelanteroMatando #VentajaPorTipoDeTiro stamp: 'a 4/25/2025 14:43:06'!
VentajaPorTipoDeTiro!
!DelanteroMatando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:43:11'!
VentajaPorTipoDeTiroCon: unaPelota! !

!methodRemoval: DelanteroMatando #VentajaPorTipoDeTiroCon stamp: 'a 4/25/2025 14:43:13'!
VentajaPorTipoDeTiroCon!
!DelanteroMatando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:43:50' prior: 50548945!
VentajaPorTipoDeTiroCon: unaPelota
	! !
!DelanteroMatando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:44:19' prior: 50548953!
VentajaPorTipoDeTiroCon: unaPelota
	^unaPelota pateadaAMatar.! !
!DelanteroColocando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:44:35' prior: 50548922!
VentajaPorTipoDeTiroCon: unaPelota
	^unaPelota pateadaAColocar.! !
!Jabulani methodsFor: 'nil' stamp: 'a 4/25/2025 14:45:02'!
pateadaAColocar
	^1.! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:45:11'!
pateadaAMatar
	^1.! !
!Playera methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:45:22'!
pateadaAMatar
	^1! !
!Playera methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:45:31'!
pateadaAColocar
	^0.5! !

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 14:45:42'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 14:45:42'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:47:34' prior: 50548773!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	pelota := unaPelota.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(arquero atajaEnDireccion: direccionDeArquero pateando: delantero fuerza conPelota: pelota pateandoHacia: direccionDeRemate) ifTrue: [arquero gol].
	
	delantero gol.
	
	
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:48:02' prior: 50548982!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	pelota := unaPelota.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(arquero atajaEnDireccion: direccionDeArquero pateando: delantero conPelota: pelota pateandoHacia: direccionDeRemate) ifTrue: [arquero gol].
	
	delantero gol.
	
	
		! !

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 14:48:08'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 14:48:10'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 14:48:10'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:48:24' prior: 50549004!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	pelota := unaPelota.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(arquero atajaEnDireccion: direccionDeArquero pateando: delantero conPelota: pelota pateandoHacia: direccionDeRemate) ifTrue: [arquero ataja].
	
	delantero gol.
	
	
		! !

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 14:48:29'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 14:48:29'!
FAILURE!

| arquero delantero juegoPenales pelota |
	
	"Caso general del juego..."
	
	delantero := Delantero decideTirarAColocarSuFuerzaBaseEs: 100.
	pelota := Pelota jabulaniSudafricanaRapida.
	arquero := Arquero esperaPorTiroYSeAdelantaSuFuerzaBaseEs: 100.
	
	juegoPenales := Penales conDelantero: delantero yArquero: arquero.
	
	juegoPenales arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: 2@2 arqueroSeLanzaEnDirección: 2@2.
	
	self assert: 0 equals: juegoPenales puntajeDeDelantero.
	self assert: 1 equals: juegoPenales puntajeDeArquero.
	self assert: 2@2 equals: juegoPenales varDireccionRemateResultante!

 unDelantero fuerza * bonusPorTipoDePelota !

(direccionDeArquero) x  = (direccionDeRemate) x !

  (100 * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) !

 (direccionDeArquero) x  = (direccionDeRemate) x & (100 * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota))  !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:55:30' prior: 50549026!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	pelota := unaPelota.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(arquero atajaEnDireccion: direccionDeArquero pateando: delantero conPelota: pelota pateandoHacia: direccionDeRemate) ifTrue: [arquero ataja].
	
	delantero gol.
	
	
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:55:39' prior: 50549077!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: direccionDeRemate arqueroSeLanzaEnDirección: direccionDeArquero

	direccionRemate := direccionDeRemate.
	
	pelota := unaPelota.
	
	 (direccionDeRemate between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionTiroFueraDeRango].
	
	(direccionDeArquero between: 0@0 and: 2@2) not ifTrue: [^self class error: self class direccionArqueroFueraDeRango].
		
	(arquero atajaEnDireccion: direccionDeArquero pateando: delantero conPelota: pelota pateandoHacia: direccionDeRemate) ifTrue: [arquero ataja. ^self].
	
	delantero gol.
	
	
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 14:55:49'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'a 4/25/2025 14:55:51'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'a 4/25/2025 14:55:52'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'a 4/25/2025 14:55:53'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'a 4/25/2025 14:55:54'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'a 4/25/2025 14:55:55'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'a 4/25/2025 14:55:56'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'a 4/25/2025 14:55:57'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 14:55:58'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 14:55:59'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 14:55:59'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 14:56:00'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 14:56:01'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'a 4/25/2025 14:56:02'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 14:56:03'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 14:56:03'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 14:56:04'!
FAILURE!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 14:56:04'!
FAILURE!
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:57:48' prior: 50548889 overrides: 50548740!
atajaEnDireccion: direccionDeArquero pateando: unDelantero conPelota: unaPelota pateandoHacia: direccionDeRemate
	
	 |bonusPorFuerzaDeTiro bonusPorTipoDePelota|
	
	bonusPorFuerzaDeTiro := unDelantero VentajaPorTipoDeTiroCon: unaPelota.
	
	bonusPorTipoDePelota := unaPelota efecto.

	^ (direccionDeArquero) x  = (direccionDeRemate) x & (fuerza * bonusPorFuerzaDeTiro >= ( unDelantero fuerza * bonusPorTipoDePelota)) ! !
!Playera methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 14:58:51' prior: 50548978!
pateadaAColocar
	^2! !

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 14:58:59'!
FAILURE!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 14:58:59'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 14:59:06'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 14:59:07'!
PASSED!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 15:00:40' prior: 50547727!
varFuerzaResultanteDeAtajada
	^arquero fuerza * delantero ! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 15:01:09' prior: 50549142!
varFuerzaResultanteDeAtajada
	^arquero fuerza * delantero VentajaPorTipoDeTiroCon: pelota ! !

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 15:01:20'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 15:01:20'!
ERROR!

juegoPenales !

juegoPenales puntajeDeDelantero !

juegoPenales puntajeDeDelantero !

juegoPenales!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 15:05:18'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 15:05:20'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 15:05:21'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 15:05:21'!
ERROR!
!DelanteroColocando methodsFor: 'nil' stamp: 'a 4/25/2025 15:06:07' overrides: 50547273!
puntaje
	^puntaje! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 15:06:17' prior: 50547273!
puntaje
	^self subclassResponsibility! !
!DelanteroMatando methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 15:06:21' overrides: 50549160!
puntaje
	^puntaje! !

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 15:06:28'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 15:06:28'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 15:07:25'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 15:07:25'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 15:07:39' prior: 50549147!
varFuerzaResultanteDeAtajada
	^arquero fuerza * (delantero VentajaPorTipoDeTiroCon: pelota) ! !

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 15:07:45'!
FAILURE!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 15:07:45'!
FAILURE!

----SNAPSHOT----(25 April 2025 15:08:25) CuisUniversity-6350.image priorSource: 6935267!

----End fileIn of C:\Users\lauta\OneDrive\Desktop\UBA\Ing-Soft\Parte 2\07-Penales\Penales.st----!

----End fileIn of C:\Users\lauta\OneDrive\Desktop\UBA\Ing-Soft\Parte 2\07-Penales\Penales.st----!

!classRemoval: #Penales stamp: 'a 4/25/2025 20:31:11'!
Object subclass: #Penales
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #Playera stamp: 'a 4/25/2025 20:31:12'!
Pelota subclass: #Playera
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #Jabulani stamp: 'a 4/25/2025 20:31:12'!
Pelota subclass: #Jabulani
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #Pelota stamp: 'a 4/25/2025 20:31:12'!
Object subclass: #Pelota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #DelanteroMatando stamp: 'a 4/25/2025 20:31:12'!
Delantero subclass: #DelanteroMatando
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #DelanteroColocando stamp: 'a 4/25/2025 20:31:12'!
Delantero subclass: #DelanteroColocando
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #Delantero stamp: 'a 4/25/2025 20:31:13'!
Object subclass: #Delantero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #ArqueroEsperando stamp: 'a 4/25/2025 20:31:13'!
Arquero subclass: #ArqueroEsperando
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #ArqueroAdelantado stamp: 'a 4/25/2025 20:31:13'!
Arquero subclass: #ArqueroAdelantado
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #Arquero stamp: 'a 4/25/2025 20:31:13'!
Object subclass: #Arquero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #PenalesTest stamp: 'a 4/25/2025 20:31:13'!
TestCase subclass: #PenalesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

----End fileIn of C:\Users\lauta\OneDrive\Desktop\UBA\Ing-Soft\Parte 2\07-Penales\Penales.st----!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:33:36'!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:33:37' prior: 50552672!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:33:39' prior: 50552679!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:33:55' prior: 50552686!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:34:18' prior: 50552693!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	pelota class = #jubiliani! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:34:34' prior: 50552700!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	pelota class = #jabulani! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:34:46' prior: 50552708!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	pelota class = #jabulani ifTrue: [
		
		
		
		]! !

!classDefinition: #Penales category: #Penales stamp: 'a 4/25/2025 20:35:33'!
Object subclass: #Penales
	instanceVariableNames: 'delantero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:35:24' prior: 50552716!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 delantero class = #jabulani ifTrue: [
		
		
		
		
		
		]! !
!Penales class methodsFor: 'nil' stamp: 'a 4/25/2025 20:36:34'!
conDelantero: unDelantero yArquero: unArquero
	! !
!Penales class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:36:55' prior: 50552739!
conDelantero: unDelantero yArquero: unArquero
	^(self new initializeWith: unDelantero and: unArquero)! !

!classDefinition: #Penales category: #Penales stamp: 'a 4/25/2025 20:37:20'!
Object subclass: #Penales
	instanceVariableNames: 'delantero arquero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Penales methodsFor: 'nil' stamp: 'a 4/25/2025 20:37:19'!
initializeWith: unDelantero and: unArquero
	delantero := unDelantero.
	arquero := unArquero.! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:37:21' prior: 50552756!
initializeWith: unDelantero and: unArquero
	delantero := unDelantero.
	arquero := unArquero.
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:37:24' prior: 50552762!
initializeWith: unDelantero and: unArquero
	delantero := unDelantero.
	arquero := unArquero.! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:38:41'!
decideTirarAColocarSuFuerzaBaseEs: unaFuerza
	^(self new initializeWith: #aColocar and: unaFuerza).
	! !

!classDefinition: #Delantero category: #Penales stamp: 'a 4/25/2025 20:39:19'!
Object subclass: #Delantero
	instanceVariableNames: 'tiro'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Delantero category: #Penales stamp: 'a 4/25/2025 20:39:21'!
Object subclass: #Delantero
	instanceVariableNames: 'tiro fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Delantero methodsFor: 'nil' stamp: 'a 4/25/2025 20:39:18'!
initializeWith: unTipoDeTiro and: unaFuerza
		tiro := #aColocar.
		fuerza := unaFuerza.! !
!Pelota class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:40:08'!
jabulaniSudafricanaRapida
	^(self new initializeWith: #jabulani)! !

!classDefinition: #Pelota category: #Penales stamp: 'a 4/25/2025 20:40:31'!
Object subclass: #Pelota
	instanceVariableNames: 'tipo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Pelota methodsFor: 'nil' stamp: 'a 4/25/2025 20:40:29'!
initializeWith: unTipo
	tipo := unTipo! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:41:01'!
esperaPorTiroYSeAdelantaSuFuerzaBaseEs: unaFuerza
	^(self new initializeWith: #Espera and: unaFuerza)
	! !

!classDefinition: #Arquero category: #Penales stamp: 'a 4/25/2025 20:41:22'!
Object subclass: #Arquero
	instanceVariableNames: 'tipo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Arquero category: #Penales stamp: 'a 4/25/2025 20:41:23'!
Object subclass: #Arquero
	instanceVariableNames: 'tipo fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Arquero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:41:21'!
initializeWith: unTipo and: unaFuerza
	tipo := unTipo.
	fuerza := unaFuerza! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:42:57' prior: 50552731!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 delantero tiro =  #l ifTrue: [
		
		
		
		
		
		]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:43:12' prior: 50552839!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 delantero tiro =  #aColocar ifTrue: [
		
		
		
		
		
		]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:43:50' prior: 50552848!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		
		
		
		
		
		
		]! !
!Delantero methodsFor: 'nil' stamp: 'a 4/25/2025 20:44:16'!
haceTiro: unTipo
	^tiro = unTipo! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:45:05' prior: 50552857!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		
		
		
		
		].
	
	(delantero haceTiro: #AMatar) ifTrue: []! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:45:10' prior: 50552869!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		
		
		
		
		].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:45:11' prior: 50552880!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		
			
		
		
		].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:45:12' prior: 50552891!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		
		
		
		
		].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:45:23' prior: 50552902!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		
		
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:45:58' prior: 50552913!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		
		(pelota esTipo: #jabulani) ifTrue: [].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:46:13'!
esTipo: unTipo
	^tipo = unTipo! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:46:21' prior: 50552924!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		
		(pelota esTipo: #jabulani) ifTrue: [
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:46:21' prior: 50552939!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		
		(pelota esTipo: #jabulani) ifTrue: [
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:46:24' prior: 50552951!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		
		(pelota esTipo: #jabulani) ifTrue: [
			
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:46:50' prior: 50552963!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		
		(pelota esTipo: #jabulani) ifTrue: [
			
			(arquero haceAtajada: #espera) ifTrue: [
				].
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:47:04' prior: 50552975!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		
		(pelota esTipo: #jabulani) ifTrue: [
			
			(arquero haceAtajada: #espera) ifTrue: [
				
				].
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:47:07' prior: 50552989!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		
		(pelota esTipo: #jabulani) ifTrue: [
			
			(arquero haceAtajada: #espera) ifTrue: [
				
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:47:48' prior: 50553003!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		delantero usaMitadDeFuerza.
		
		(pelota esTipo: #jabulani) ifTrue: [
			
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Delantero methodsFor: 'nil' stamp: 'a 4/25/2025 20:48:02'!
usaMitadDeFuerza
	fuerza := fuerza / 2.! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:48:09' prior: 50553017!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		delantero usaMitadDeFuerza.
		
		(pelota esTipo: #jabulani) ifTrue: [
			
			
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:49:33' prior: 50553036!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:49:54'!
saleConFraccionDeFuerza: unNumero
	fuerza := fuerza * unNumero! !

!methodRemoval: Delantero #usaMitadDeFuerza stamp: 'a 4/25/2025 20:50:01'!
usaMitadDeFuerza
	fuerza := fuerza / 2.!
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:50:14' prior: 50552865!
haceTiro: unTipo
	tiro = unTipo! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:51:22' prior: 50553051!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	(unaDireccion between: 0@0 and: 2@2) ifTrue: [].
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:51:28' prior: 50553079!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [].
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:51:49' prior: 50553096!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [self error: self ].
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:52:15' prior: 50553113!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [self error: self ].
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:52:30' prior: 50553131!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [self error: self class direccionTiroFueraDeRango ].
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:52:31' prior: 50553149!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [self error: self class direccionTiroFueraDeRango].
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:52:52' prior: 50553168!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [self error: self class direccionTiroFueraDeRango].
	(otraDireccion between: 0@0 and: 2@2) not ifTrue: [self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:53:00' prior: 50553187!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(otraDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !

!classDefinition: #Penales category: #Penales stamp: 'a 4/25/2025 20:53:41'!
Object subclass: #Penales
	instanceVariableNames: 'delantero arquero puntajeDeDelantero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:53:40'!
puntajeDeDelantero
	^puntajeDeDelantero! !

!classDefinition: #Penales category: #Penales stamp: 'a 4/25/2025 20:53:51'!
Object subclass: #Penales
	instanceVariableNames: 'delantero arquero puntajeDeDelantero puntajeDeArquero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:53:50'!
puntajeDeArquero
	^puntajeDeArquero! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 20:53:55'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 20:53:55'!
FAILURE!
!Penales class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:54:19' prior: 50552744!
conDelantero: unDelantero yArquero: unArquero
	^(self new initializeWith: unDelantero and: unArquero)! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:54:31' prior: 50552768!
initializeWith: unDelantero and: unArquero
	delantero := unDelantero.
	arquero := unArquero.
	puntajeDeArquero := 0.! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:54:38' prior: 50553262!
initializeWith: unDelantero and: unArquero
	delantero := unDelantero.
	arquero := unArquero.
	puntajeDeArquero := 0.
	puntajeDeDelantero := 0.! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'a 4/25/2025 20:54:42'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'a 4/25/2025 20:54:44'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'a 4/25/2025 20:54:45'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'a 4/25/2025 20:54:46'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'a 4/25/2025 20:54:47'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'a 4/25/2025 20:54:47'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'a 4/25/2025 20:54:48'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'a 4/25/2025 20:54:49'!
PASSED!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:55:03' prior: 50553209!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(otraDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
				
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !

Object subclass: #Penales
	instanceVariableNames: 'delantero arquero puntajeDeDelantero puntajeDeArquero varDireccionRemateResultante'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classDefinition: #Penales category: #Penales stamp: 'a 4/25/2025 20:57:11'!
Object subclass: #Penales
	instanceVariableNames: 'delantero arquero puntajeDeDelantero puntajeDeArquero varDireccionRemateResultante'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:57:49' prior: 50553277!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(otraDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ | fuerzaResultante | 
		 fuerzaResultante := delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
				
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:58:12' prior: 50553314!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	| fuerzaResultante | 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(otraDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultante := delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
				
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:58:16' prior: 50553338!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	| fuerzaResultante | 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(otraDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultante := delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
				
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 20:58:51' prior: 50553362!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	| fuerzaResultante direccionResultante | 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(otraDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultante := delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
				direccionResultante := 1.
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Arquero methodsFor: 'nil' stamp: 'a 4/25/2025 20:59:23'!
haceAtajada: unTipo
	^ tipo = unTipo! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:00:33' prior: 50553386!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	| fuerzaResultante direccionResultante | 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(otraDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultante := delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:01:05' prior: 50553415!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	| fuerzaDePatada fuerzaDeAtajada direccionResultante | 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(otraDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
						
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:01:53' prior: 50553439!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	| fuerzaDePatada fuerzaDeAtajada direccionResultante | 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(otraDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
					fuerzaDeAtajada := arquero atajaConFraccionDeFuerza: 3/2.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:02:55' prior: 50553463!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: otraDireccion
	
	| fuerzaDePatada fuerzaDeAtajada direccionResultante | 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(otraDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(fuerzaDePatada = fuerzaDeAtajada)! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:04:52' prior: 50553489!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada direccionResultante | 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	fuerzaDePatada = fuerzaDeAtajada & ((direccionAtajada) = (direccionResultante) not) ifTrue: [
		puntajeDeArquero :=  puntajeDeArquero + 1.
		
		]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:05:13' prior: 50553516!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada direccionResultante | 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionResultante := unaDireccion.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	fuerzaDePatada = fuerzaDeAtajada & ((direccionAtajada) = (direccionResultante) not) ifTrue: [
		puntajeDeArquero :=  puntajeDeArquero + 1.
		
		]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:05:34' prior: 50553547!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada direccionResultante | 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionResultante := unaDireccion.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	fuerzaDePatada = fuerzaDeAtajada & ((direccionAtajada) = (direccionResultante) not) ifTrue: [
		puntajeDeArquero :=  puntajeDeArquero + 1.
		]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:05:46' prior: 50553579!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada direccionResultante | 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionResultante := unaDireccion.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	fuerzaDePatada = fuerzaDeAtajada & ((direccionAtajada) = (direccionResultante) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		]! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:05:48'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:05:48'!
ERROR!

!classDefinition: #Penales category: #Penales stamp: 'a 4/25/2025 21:07:09'!
Object subclass: #Penales
	instanceVariableNames: 'delantero arquero puntajeDeDelantero puntajeDeArquero varDireccionRemateResultante direccionPatadaResultante'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:07:55' prior: 50553611!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	fuerzaDePatada = fuerzaDeAtajada & ((direccionAtajada) = (direccionPatadaResultante) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		]! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:08:56'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:08:56'!
ERROR!
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:09:13' prior: 50553075!
haceTiro: unTipo
	^tiro = unTipo! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:09:19'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:09:19'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:09:46' prior: 50553653!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	fuerzaDePatada = fuerzaDeAtajada & (((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		]! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:09:52'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:09:52'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:10:28'!
varDireccionRemateResultante
	^direccionPatadaResultante! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:10:33'!
FAILURE!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:10:33'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:11:42' prior: 50553689!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #aColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	fuerzaDePatada = fuerzaDeAtajada & (((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		]! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:11:48'!
FAILURE!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:11:48'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:12:13' prior: 50553725!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #aColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	fuerzaDePatada >= fuerzaDeAtajada & (((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		]! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:12:24'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:12:24'!
ERROR!
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:12:46' prior: 50553066!
saleConFraccionDeFuerza: unNumero
	^ fuerza * unNumero! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:12:51'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:12:51'!
ERROR!
!Arquero methodsFor: 'nil' stamp: 'a 4/25/2025 21:13:34'!
saleConFraccionDeFuerza: unNumero
	^fuerza * unNumero.! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:13:44'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:13:44'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:14:31' prior: 50553757!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #aColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	fuerzaDePatada >= fuerzaDeAtajada & (((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:14:35' prior: 50553798!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #aColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	fuerzaDePatada >= fuerzaDeAtajada & (((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:14:39' prior: 50553830!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #aColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	fuerzaDePatada >= fuerzaDeAtajada & (((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:14:42' prior: 50553862!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	fuerzaDePatada >= fuerzaDeAtajada & (((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		]! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:14:58' prior: 50552774!
decideTirarAColocarSuFuerzaBaseEs: unaFuerza
	^(self new initializeWith: #AColocar and: unaFuerza).
	! !
!Pelota class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:15:05' prior: 50552799!
jabulaniSudafricanaRapida
	^(self new initializeWith: #Jabulani)! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:15:11'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:15:11'!
ERROR!
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:16:03' prior: 50552793!
initializeWith: unTipoDeTiro and: unaFuerza
		tiro := #AColocar.
		fuerza := unaFuerza.! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:16:20' prior: 50553938!
initializeWith: unTipoDeTiro and: unaFuerza
		tiro := unTipoDeTiro.
		fuerza := unaFuerza.! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:16:26'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:16:26'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:17:15' prior: 50553894!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	fuerzaDePatada >= fuerzaDeAtajada & (((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		]! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:17:18'!
FAILURE!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:17:18'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:18:17' prior: 50553950!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		]! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:18:23'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 21:18:26'!
FAILURE!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 21:18:26'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:18:49' prior: 50553982!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:20:12' prior: 50554013!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) not & (fuerzaDeAtajada < fuerzaDePatada) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].! !

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 21:20:14'!
FAILURE!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 21:20:14'!
FAILURE!

((direccionAtajada) = (direccionPatadaResultante)) not & (fuerzaDeAtajada < fuerzaDePatada)!

(fuerzaDeAtajada < fuerzaDePatada)!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:21:34' prior: 50554044!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaDeAtajada < fuerzaDePatada) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].! !

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 21:21:42'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'a 4/25/2025 21:21:44'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 21:21:45'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 21:21:45'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:22:39' prior: 50554084!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDePatada fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaDePatada := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaDeAtajada < fuerzaDePatada) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaDeAtajada >= fuerzaDePatada) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 21:22:41'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'a 4/25/2025 21:22:43'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 21:22:48'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 21:22:48'!
ERROR!

!classDefinition: #Penales category: #Penales stamp: 'a 4/25/2025 21:23:21'!
Object subclass: #Penales
	instanceVariableNames: 'delantero arquero puntajeDeDelantero puntajeDeArquero varDireccionRemateResultante direccionPatadaResultante fuerzaResultanteDeTiro'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:23:32' prior: 50554120!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'nil' stamp: 'a 4/25/2025 21:23:49'!
varFuerzaResultanteDeTiro
	^fuerzaResultanteDeTiro! !

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 21:23:51'!
PASSED!
!Delantero class methodsFor: 'nil' stamp: 'a 4/25/2025 21:24:32'!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerza
	^self new initializeWith: #EligeAntes and: unaFuerza! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:25:00' prior: 50554171!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:25:18' prior: 50554222!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	| fuerzaDeAtajada| 
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !

!classDefinition: #Penales category: #Penales stamp: 'a 4/25/2025 21:25:44'!
Object subclass: #Penales
	instanceVariableNames: 'delantero arquero puntajeDeDelantero puntajeDeArquero varDireccionRemateResultante direccionPatadaResultante fuerzaResultanteDeTiro fuerzaResultanteDeAtajada'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:25:51' prior: 50554266!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 21:27:00'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 21:27:00'!
ERROR!

!methodRemoval: Delantero class #eligeDireccionAntesDeTiroSuFuerzaBaseEs: stamp: 'a 4/25/2025 21:27:40'!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerza
	^self new initializeWith: #EligeAntes and: unaFuerza!
!Arquero class methodsFor: 'nil' stamp: 'a 4/25/2025 21:28:16'!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerza
	self new initializeWith: #EligeAntes and: unaFuerza! !

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 21:28:19'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 21:28:19'!
ERROR!
!Arquero class methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:28:26' prior: 50554373!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerza
	^self new initializeWith: #EligeAntes and: unaFuerza! !

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 21:28:27'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 21:28:27'!
ERROR!
!Penales methodsFor: 'nil' stamp: 'a 4/25/2025 21:28:49'!
varFuerzaResultanteDeAtajada
	^fuerzaResultanteDeAtajada! !

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 21:28:51'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'a 4/25/2025 21:28:52'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'a 4/25/2025 21:28:53'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'a 4/25/2025 21:29:03'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'a 4/25/2025 21:29:05'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 21:29:06'!
FAILURE!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 21:29:06'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:29:41' prior: 50554322!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				
				].
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:29:44' prior: 50554391!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				
				].
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:29:52' prior: 50554436!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
			
				].
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:29:54' prior: 50554481!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				
				].
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:30:53' prior: 50554526!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
					].
				].
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:31:04' prior: 50554571!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				((direccionAtajada) x = (direccionPatadaResultante) x) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
					].
				].
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:31:17' prior: 50554622!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				((direccionAtajada) x = (direccionPatadaResultante) x) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
					].
				].
			
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:32:36' prior: 50554673!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.]
					
					].
				].
			
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 21:32:46'!
FAILURE!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 21:32:46'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:34:24' prior: 50554724!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 21:34:26'!
FAILURE!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 21:34:26'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:36:17' prior: 50554779!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:36:21' prior: 50554834!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:36:25' prior: 50554890!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:36:26' prior: 50554946!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:36:30' prior: 50555002!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:36:32' prior: 50555058!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'a 4/25/2025 21:36:35'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'a 4/25/2025 21:36:36'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 21:36:38'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 21:36:38'!
ERROR!
!Pelota class methodsFor: 'nil' stamp: 'a 4/25/2025 21:36:58'!
playeraLentaCostaAzul
	^self new initializeWith: #Playera! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:38:02' prior: 50555115!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:38:40' prior: 50555176!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:39:09' prior: 50555234!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'a 4/25/2025 21:39:16'!
PASSED!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:39:37' prior: 50555294!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'a 4/25/2025 21:39:39'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'a 4/25/2025 21:39:41'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'a 4/25/2025 21:39:56'!
FAILURE!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'a 4/25/2025 21:39:56'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:41:30' prior: 50555373!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'a 4/25/2025 21:41:33'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'a 4/25/2025 21:41:35'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'a 4/25/2025 21:41:35'!
ERROR!
!Delantero class methodsFor: 'nil' stamp: 'a 4/25/2025 21:42:05'!
decideTirarAMatarSuFuerzaBaseEs: unaFuerza
	^self new initializeWith: #AMatar and: unaFuerza! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:42:21' prior: 50555452!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:43:02' prior: 50555525!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:44:06' prior: 50555594!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		unaDireccion x = direccionAtajada
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:44:13' prior: 50555663!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		unaDireccion x = direccionAtajada ifTrue: [
			]
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:44:16' prior: 50555733!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		unaDireccion x = direccionAtajada ifTrue: [
			
			]
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:44:19' prior: 50555803!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		unaDireccion x = direccionAtajada ifTrue: [
				
			]
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:44:38' prior: 50555873!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:45:03' prior: 50555943!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		direccionPatadaResultante := unaDireccion x @ 1.
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:46:05' prior: 50556012!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		direccionPatadaResultante := unaDireccion x @ 0.
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:46:24' prior: 50556082!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		direccionPatadaResultante := unaDireccion x @ 0.
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'a 4/25/2025 21:46:27'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'a 4/25/2025 21:46:27'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:47:05' prior: 50556152!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		direccionPatadaResultante := unaDireccion x @ 0.
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'a 4/25/2025 21:47:07'!
FAILURE!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'a 4/25/2025 21:47:07'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:47:22' prior: 50556254!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		direccionPatadaResultante := unaDireccion x @ 1.
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'a 4/25/2025 21:47:24'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'a 4/25/2025 21:47:26'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'a 4/25/2025 21:47:27'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'a 4/25/2025 21:47:28'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'a 4/25/2025 21:47:29'!
FAILURE!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'a 4/25/2025 21:47:29'!
FAILURE!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'a 4/25/2025 21:47:48'!
FAILURE!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'a 4/25/2025 21:47:48'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:49:32' prior: 50556358!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		(unaDireccion x = 1) not ifTrue: [direccionPatadaResultante := unaDireccion]. 
		direccionPatadaResultante := unaDireccion x @ 1.
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'a 4/25/2025 21:49:34'!
FAILURE!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'a 4/25/2025 21:49:34'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:50:10' prior: 50556462!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		(unaDireccion x = 1) not ifTrue: [direccionPatadaResultante := unaDireccion]. 
		(unaDireccion x = 1) ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'a 4/25/2025 21:50:12'!
FAILURE!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'a 4/25/2025 21:50:12'!
FAILURE!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'a 4/25/2025 21:50:21'!
FAILURE!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'a 4/25/2025 21:50:21'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:52:12' prior: 50556569!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'a 4/25/2025 21:52:15'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'a 4/25/2025 21:52:16'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'a 4/25/2025 21:52:18'!
FAILURE!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'a 4/25/2025 21:52:18'!
FAILURE!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'a 4/25/2025 21:52:35'!
FAILURE!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'a 4/25/2025 21:52:35'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:52:45' prior: 50556677!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'a 4/25/2025 21:52:47'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'a 4/25/2025 21:52:50'!
FAILURE!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'a 4/25/2025 21:52:50'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:53:32' prior: 50556786!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 6/5.
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'a 4/25/2025 21:53:34'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'a 4/25/2025 21:53:36'!
FAILURE!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'a 4/25/2025 21:53:36'!
FAILURE!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'a 4/25/2025 21:53:56'!
FAILURE!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'a 4/25/2025 21:53:56'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:57:20' prior: 50556893!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 6/5.
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'a 4/25/2025 21:57:22'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'a 4/25/2025 21:57:22'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:57:34' prior: 50557003!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 6/5.
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'a 4/25/2025 21:57:36'!
PASSED!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'a 4/25/2025 21:57:38'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'a 4/25/2025 21:57:38'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 21:58:29' prior: 50557109!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 6/5.
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 22:00:57' prior: 50557219!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 6/5.
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				direccionAtajada x = unaDireccion x ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					]
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 22:01:00' prior: 50557329!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 6/5.
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				direccionAtajada x = unaDireccion x ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
					]
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'a 4/25/2025 22:01:01'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'a 4/25/2025 22:01:01'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 22:01:16' prior: 50557442!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 6/5.
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				direccionAtajada x = unaDireccion x ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
					]
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		].
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'a 4/25/2025 22:01:18'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'a 4/25/2025 22:01:19'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'a 4/25/2025 22:01:19'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'a 4/25/2025 23:33:22'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'a 4/25/2025 23:33:22'!
ERROR!

----STARTUP---- (25 April 2025 23:33:09) as C:\Users\lauta\OneDrive\Desktop\UBA\Ing-Soft\windows64\CuisUniversity-6350.image!


!classRemoval: #Penales stamp: 'a 4/25/2025 23:33:41'!
Object subclass: #Penales
	instanceVariableNames: 'arquero delantero pelota direccionRemate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #Playera stamp: 'a 4/25/2025 23:33:41'!
Pelota subclass: #Playera
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #Jabulani stamp: 'a 4/25/2025 23:33:41'!
Pelota subclass: #Jabulani
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #Pelota stamp: 'a 4/25/2025 23:33:41'!
Object subclass: #Pelota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #DelanteroMatando stamp: 'a 4/25/2025 23:33:41'!
Delantero subclass: #DelanteroMatando
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #DelanteroColocando stamp: 'a 4/25/2025 23:33:41'!
Delantero subclass: #DelanteroColocando
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #Delantero stamp: 'a 4/25/2025 23:33:42'!
Object subclass: #Delantero
	instanceVariableNames: 'puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #ArqueroEsperando stamp: 'a 4/25/2025 23:33:42'!
Arquero subclass: #ArqueroEsperando
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #ArqueroAdelantado stamp: 'a 4/25/2025 23:33:42'!
Arquero subclass: #ArqueroAdelantado
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #Arquero stamp: 'a 4/25/2025 23:33:42'!
Object subclass: #Arquero
	instanceVariableNames: 'puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

!classRemoval: #PenalesTest stamp: 'a 4/25/2025 23:33:42'!
TestCase subclass: #PenalesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Penales'!

----End fileIn of C:\Users\lauta\OneDrive\Desktop\UBA\Ing-Soft\windows64-UserFiles\FileOuts\PenalesConIfs.st----!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'a 4/25/2025 23:35:33'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'a 4/25/2025 23:35:35'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'a 4/25/2025 23:35:35'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 23:37:16' prior: 50558952!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 6/5.
			(arquero haceAtajada: #Espera) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				direccionAtajada x = unaDireccion x ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
					]
				].
			
			
			
			
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'a 4/25/2025 23:37:40'!
PASSED!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'a 4/25/2025 23:37:42'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'a 4/25/2025 23:37:42'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 23:42:03' prior: 50559124!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 6/5.
			(arquero haceAtajada: #Espera) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				direccionAtajada x = unaDireccion x ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
					]
				].
			
			
			
			
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
		
		
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'a 4/25/2025 23:42:24'!
PASSED!
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 23:44:16' prior: 50559226!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 6/5.
			(arquero haceAtajada: #Espera) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				direccionAtajada x = unaDireccion x ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
					]
				].
			
			
			
			
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				(direccionPatadaResultante y = direccionAtajada y) ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
					].
				
				].
			
			
			
			
			].
		
		
		
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 23:44:34' prior: 50559328!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 6/5.
			(arquero haceAtajada: #Espera) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				direccionAtajada x = unaDireccion x ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
					]
				].
			
			
			
			
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				(direccionPatadaResultante y = direccionAtajada y) ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
					].
				puntajeDeDelantero  := puntajeDeDelantero  + 1
				].
			
			
			
			
			].
		
		
		
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 23:44:34' prior: 50559432!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 6/5.
			(arquero haceAtajada: #Espera) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				direccionAtajada x = unaDireccion x ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
					]
				].
			
			
			
			
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				(direccionPatadaResultante y = direccionAtajada y) ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
					].
				puntajeDeDelantero  := puntajeDeDelantero  + 1.
				].
			
			
			
			
			].
		
		
		
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !
!Penales methodsFor: 'as yet unclassified' stamp: 'a 4/25/2025 23:44:39' prior: 50559538!
arbitroPitaConPelota: pelota delanteroRemataAlArcoConDireccion: unaDireccion  arqueroSeLanzaEnDirección: direccionAtajada
	
	
	
	(unaDireccion between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionTiroFueraDeRango].
	(direccionAtajada between: 0@0 and: 2@2) not ifTrue: [^self error: self class direccionArqueroFueraDeRango].
	
	
	
	
	 (delantero haceTiro: #AColocar) ifTrue: [ 
		 fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 1/2.
		direccionPatadaResultante := unaDireccion.
		
		(pelota esTipo: #Jabulani) ifTrue: [  
			(arquero haceAtajada: #Espera) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				((direccionAtajada) x = (direccionPatadaResultante) x) ifTrue: [
					(fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeArquero := puntajeDeArquero + 1.
						^self].
					(fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 3/2.
				].
			
			
			
			
			].	
		(pelota esTipo: #Playera) ifTrue:[
				fuerzaResultanteDeTiro  := fuerzaResultanteDeTiro  * 4/5.
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeDelantero  := puntajeDeDelantero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 4/2.
				].
			
			
			
			
			].
		
	].
	
	(delantero haceTiro: #AMatar) ifTrue: [
		fuerzaResultanteDeTiro  := delantero  saleConFraccionDeFuerza:  1.
		((unaDireccion x = 1) | (unaDireccion y = 1)) ifTrue: [direccionPatadaResultante := unaDireccion]. 
		((unaDireccion x = 1) | (unaDireccion y = 1))not ifTrue: [direccionPatadaResultante := unaDireccion x @ 1.]. 
				
		(pelota esTipo: #Jabulani) ifTrue: [  
			fuerzaResultanteDeTiro := delantero saleConFraccionDeFuerza: 6/5.
			(arquero haceAtajada: #Espera) ifTrue: [
						puntajeDeDelantero := puntajeDeDelantero + 1.
						^self]
					
					].
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				fuerzaResultanteDeAtajada := arquero saleConFraccionDeFuerza: 1.
				direccionAtajada x = unaDireccion x ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
					]
				].
			
			
			
			
		(pelota esTipo: #Playera) ifTrue:[
				(arquero haceAtajada: #Espera) ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
				].
			(arquero haceAtajada: #EligeAntes) ifTrue: [
				(direccionPatadaResultante y = direccionAtajada y) ifTrue: [
					puntajeDeArquero  := puntajeDeArquero  + 1.
					^self.
					].
				puntajeDeDelantero  := puntajeDeDelantero  + 1.
				^self.
				].
			
			
			
			
			].
		
		
		
	
	(((direccionAtajada) = (direccionPatadaResultante)) not) ifTrue: [
		puntajeDeDelantero :=  puntajeDeDelantero + 1.
		^self.
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada < fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeDelantero := puntajeDeDelantero + 1.
		^self
		].
	((direccionAtajada) = (direccionPatadaResultante)) & (fuerzaResultanteDeAtajada >= fuerzaResultanteDeTiro) ifTrue: [
		puntajeDeArquero := puntajeDeArquero + 1.
		^self
		].
	
	! !

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'a 4/25/2025 23:44:48'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'a 4/25/2025 23:44:48'!
FAILURE!